services:
  db:
    image: postgres:16-alpine
    container_name: cj_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: cjuser
      POSTGRES_PASSWORD: cjpass
      POSTGRES_DB: cannajournal
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cjuser -d cannajournal"]
      interval: 10s
      timeout: 5s
      retries: 10

  api:
    build: ./backend-api
    container_name: cj_api
    restart: unless-stopped
    env_file:
      - ./backend-api/.env
    environment:
      # Override just what needs to be container-aware
      DATABASE_URL: postgres://cjuser:cjpass@db:5432/cannajournal
      NODE_ENV: production
      # Optionally set ALLOWED_ORIGINS for the site domain
      ALLOWED_ORIGINS: http://localhost
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
    volumes:
      - ./backend-api/uploads:/usr/src/app/uploads

  web:
    image: nginx:1.27-alpine
    container_name: cj_web
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./build:/usr/share/nginx/html:ro

  minio:
    image: minio/minio:latest
    container_name: cj_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data

  minio-init:
    image: minio/mc:latest
    container_name: cj_minio_init
    depends_on:
      - minio
    entrypoint: ["/bin/sh","-c"]
    command: "until mc alias set local http://minio:9000 minioadmin minioadmin; do echo waiting for minio...; sleep 1; done; mc mb -p local/cjmedia || true; mc anonymous set download local/cjmedia; echo MinIO bucket cjmedia ensured;"
    restart: "no"
    profiles: ["tools"]

  migrate-uploads:
    build: ./backend-api
    container_name: cj_migrate_uploads
    env_file:
      - ./backend-api/.env
    environment:
      DATABASE_URL: postgres://cjuser:cjpass@db:5432/cannajournal
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy
    command: node ./scripts/migrate-uploads-to-s3.js
    # Use on-demand: docker compose -f compose.full.yaml run --rm migrate-uploads
    profiles: ["tools"]

volumes:
  pgdata: {}
  minio-data: {}
